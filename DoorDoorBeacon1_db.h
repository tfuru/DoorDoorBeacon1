/*
 * This file has been automatically generated by the WICED Smart Designer.
 * Definitions for constants used in the device's GATT database and function
 * prototypes that can be used to send notifications
 *
 */

// DoorDoorBeacon1_db.h

// The GPIO port number to which the ALERT pin is connected.
#define BUTTON_INTERRUPT_PORT (0)
// The GPIO pin number to which the ALERT pin is connected
#define BUTTON_INTERRUPT_PIN  (4)

#define GPIO_PIN_LED_IO25 25

// ***** Primary service 'Generic Access'
#define HDLS_GENERIC_ACCESS                       0x0100
#define UUID_SERVICE_GAP                          0x1800
// ----- Characteristic 'Device Name'
#define HDLC_GENERIC_ACCESS_DEVICE_NAME           0x0110
#define HDLC_GENERIC_ACCESS_DEVICE_NAME_VALUE     0x0111
#define UUID_CHARACTERISTIC_DEVICE_NAME           0x2A00
// ----- Characteristic 'Appearance'
#define HDLC_GENERIC_ACCESS_APPEARANCE            0x0120
#define HDLC_GENERIC_ACCESS_APPEARANCE_VALUE      0x0121
#define UUID_CHARACTERISTIC_APPEARANCE            0x2A01
// ***** Primary service 'Generic Attribute'
#define HDLS_GENERIC_ATTRIBUTE                    0x0200
#define UUID_SERVICE_GATT                         0x1801
// ***** Primary service 'DoorDoor'
#define HDLS_DOORDOOR                             0x0300
#define __UUID_DOORDOOR                           0x7c, 0xb1, 0x8f, 0x43, 0xff, 0x7c, 0x48, 0xc9, 0x8e, 0xde, 0xa2, 0x13, 0x1e, 0x22, 0x33, 0x6b
// ----- Characteristic 'Blink'
#define HDLC_DOORDOOR_BLINK                       0x0310
#define HDLC_DOORDOOR_BLINK_VALUE                 0x0311
#define __UUID_DOORDOOR_BLINK                     0x64, 0xb7, 0xce, 0xb6, 0x58, 0x51, 0x4e, 0x2b, 0xb1, 0x19, 0x49, 0x59, 0xef, 0x06, 0xfa, 0x75
// Client Configuration
#define HDLD_DOORDOOR_BLINK_CLIENT_CONFIGURATION  0x0320
// ----- Characteristic 'Button'
#define HDLC_DOORDOOR_BUTTON                      0x0330
#define HDLC_DOORDOOR_BUTTON_VALUE                0x0331
#define __UUID_DOORDOOR_BUTTON                    0xf5, 0x60, 0x10, 0x87, 0xdf, 0x10, 0x44, 0x28, 0x99, 0xb9, 0xec, 0x4c, 0x4e, 0xbc, 0x69, 0xc3
// Client Configuration
#define HDLD_DOORDOOR_BUTTON_CLIENT_CONFIGURATION 0x0340

#pragma pack(1)
// Host information for NVRAM
typedef PACKED struct
{
    // BD address of the bonded host
    BD_ADDR  bdaddr;

    // Current value of the client configuration descriptor for characteristic 'Blink'
    UINT16 doordoor_blink_client_configuration;

    // Current value of the client configuration descriptor for characteristic 'Button'
    UINT16 doordoor_button_client_configuration;
}  __HOSTINFO;
#pragma pack()

// External definitions
extern const UINT8  gatt_database[];
extern const UINT16 gatt_database_len;
extern UINT8        doordoorbeacon1_indication_sent;           // 1 means waiting for ack
extern UINT16       doordoorbeacon1_connection_handle;         // HCI handle of connection, not zero when connected
extern const BLE_PROFILE_GPIO_CFG
                    doordoorbeacon1_gpio_cfg;                  // Defines GPIO configuration used by the application
extern BD_ADDR      doordoorbeacon1_remote_addr;               // Address of currently connected client
extern UINT8        doordoorbeacon1_uuid_main_vsc_service[16]; // Main vendor specific service
// Pointer to the generated part of hostinfo
extern __HOSTINFO   *p_hostinfo_generated;

// Functions definitions

// Will be called on indication conformation
extern void doordoorbeacon1_indication_cfm();
// Registers timer. Should be called from doordoorbeacon1_create()
extern void doordoorbeacon1_reg_timer();
// Initializes persistent values in the hostinfo to add bonded peer
extern void doordoorbeacon1_add_bond(UINT8 *bda);
// Prepares generated code for connection - writes persistent values from __HOSTINFO to GATT DB
extern void __on_connection_up();
// Sends notifications or/and indications for every client configuration descriptor
// Updates __HOSTINFO by the value written by peer.
// Returns true if any persistent value is changed
extern BOOL __write_handler(UINT16 handle, int len, UINT8 *attrPtr);


// ------------------- You have to implement these functions ----------------

// It will be called at the write handler and should return TRUE if any persistent value is changed
extern BOOL on_write_doordoor_blink(int len, UINT8 *attrPtr);


// ------------------- You can call these functions ----------------

// It should be called when 'Device Name' is changed
extern BOOL store_in_db_generic_access_device_name(UINT8* p_value, UINT8 value_len);

// It should be called when 'Appearance' is changed
extern BOOL store_in_db_generic_access_appearance(UINT8* p_value, UINT8 value_len);

// It should be called when 'Blink' is changed
extern BOOL store_in_db_doordoor_blink(UINT8* p_value, UINT8 value_len, BOOL write, BOOL notify);

// It should be called when 'Button' is changed
extern BOOL store_in_db_doordoor_button(UINT8* p_value, UINT8 value_len, BOOL write, BOOL notify);
